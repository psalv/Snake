package Queue;public class PriorityNode<E>{    private PriorityNode<E> next;    private E element;    private Integer priority;    /**     * Creates an empty node.     */    public PriorityNode()    {        next = null;        element = null;    }    /**     * Creates a node storing the specified element.     *     * @param elem  the element to be stored within the new node     */    public PriorityNode (E elem)    {        next = null;        element = elem;    }    /**     * Creates a node storing the specified element, and this nodes priority in a queue.     *     * @param elem  the element to be stored within the new node     */    public PriorityNode (E elem, int pr)    {        next = null;        element = elem;        priority = pr;    }    /**     * Returns the node that follows this one.     *     * @return  the node that follows the current one     */    public PriorityNode<E> getNext()    {        return next;    }    /**     * Sets the node that follows this one.     *     * @param node  the node to be set to follow the current one     */    public void setNext (PriorityNode<E> node)    {        next = node;    }    /**     * Returns the element stored in this node.     *     * @return  the element stored in this node     */    public E getElement()    {        return element;    }    /**     * Sets the element stored in this node.     *     * @param elem  the element to be stored in this node     */    public void setElement (E elem)    {        element = elem;    }    /**     * Return the priority value of the node.     *     * @return the priority of the node     */    public int getPriority(){        return priority;    }    /**     * Sets the priority of the node.     *     * @param pr the priority fo the node     */    public void setPriority(int pr){        priority = pr;    }    /**     * Uses the element of the node.     *     * @return a string representation of the element.     */    public String toString(){        return "  " + priority + ": " + element.toString();    }    /**     * Compares two priority nodes based on their priorities.     *     * @param other a different priority node.     * @return an integer value (-1 if other is great, 0 if equal, 1 if other is lesser).     */    public int compareTo(PriorityNode other){        return priority.compareTo(other.getPriority());    }}